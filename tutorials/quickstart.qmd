---
title: "Duckling Quickstart"
format: html
date: "2023-09-12"
number-sections: true
editor: 
  markdown: 
    wrap: 72
---

## Introduction

We are actively developing Duckling and invite you to submit any feedback as 
Github issues to help us improve the package.

This vignette demonstrates the different classes of Duckling and how to work 
with them at a basic level.

## Class Structure of Duckling

[![](https://mermaid.ink/img/pako:eNp1VNuO2jAU_JXIT20XKPdAHiptxbZCKlq0u63UNhVykkOwcOzUdlqyiH_vIXEgiehT7JnxnItPfCShjIB4JORU6wWjsaKJL4qds8jCPWcido4_vy2fXr7ef_l1qriAhnsQ0VJspXP0hePcRYr9AbUJKeeeE-6ooqEBVVLBJqVm14Z3VLexroJQCgGh-VgGePPWF5egUbCghpbxLimVERD3HBPwzVpK_j_3OwWJNLARNIE2xQQznsNlzLCCZiqtHFbUKHaoqmZJYafxLNOmwnDLhIHYVnWvmNmdbXD9mGq7QqMKDCV_Z5dK_q2W5kb1n_CCwAbfQ97g15LnsRRrJQ-5lVCDyQaZwXpr5wtKbFLU1xJtOCGq60ZnNWJN-fXAM14wo_zW3Xx-eFw9vDx994qadCn8nYHKbZkRzlkUVEyr5mVCYyhcW77o7OgRdl3sq21KFfqa969UqRKzWV4mudv9YPvQAmvz7As7Z1exbVoDL8fgDNqBKGFshNJwJev7SgIJa8saggWIOlcLattsjYuOl0T96m-xl-tsGRbtJR2SgEooi_AlKHrtE7MDLJl4uIxgSzNufILdRCnNjHzORUg8ozLokCzFvw_s20G8LeUa0ZSKH1ImlQi3xDuSA_GGk0mvP5zOxoOxO5gN5_NJh-TEc0e9udvvu0N3MEV8NDx1yGth0O_NR9MJEvP-YDyZueMOgYgZqVb26Tp_Tv8AkhOfRQ?type=png)](https://mermaid.live/edit#pako:eNp1VNuO2jAU_JXIT20XKPdAHiptxbZCKlq0u63UNhVykkOwcOzUdlqyiH_vIXEgiehT7JnxnItPfCShjIB4JORU6wWjsaKJL4qds8jCPWcido4_vy2fXr7ef_l1qriAhnsQ0VJspXP0hePcRYr9AbUJKeeeE-6ooqEBVVLBJqVm14Z3VLexroJQCgGh-VgGePPWF5egUbCghpbxLimVERD3HBPwzVpK_j_3OwWJNLARNIE2xQQznsNlzLCCZiqtHFbUKHaoqmZJYafxLNOmwnDLhIHYVnWvmNmdbXD9mGq7QqMKDCV_Z5dK_q2W5kb1n_CCwAbfQ97g15LnsRRrJQ-5lVCDyQaZwXpr5wtKbFLU1xJtOCGq60ZnNWJN-fXAM14wo_zW3Xx-eFw9vDx994qadCn8nYHKbZkRzlkUVEyr5mVCYyhcW77o7OgRdl3sq21KFfqa969UqRKzWV4mudv9YPvQAmvz7As7Z1exbVoDL8fgDNqBKGFshNJwJev7SgIJa8saggWIOlcLattsjYuOl0T96m-xl-tsGRbtJR2SgEooi_AlKHrtE7MDLJl4uIxgSzNufILdRCnNjHzORUg8ozLokCzFvw_s20G8LeUa0ZSKH1ImlQi3xDuSA_GGk0mvP5zOxoOxO5gN5_NJh-TEc0e9udvvu0N3MEV8NDx1yGth0O_NR9MJEvP-YDyZueMOgYgZqVb26Tp_Tv8AkhOfRQ)

Duckling currently supports the following generic methods.

|          | dbSparseMatrix | dbDenseMatrix | dbDataFrame |
|----------|----------------|---------------|-------------|
| colSums  | âœ…             | âœ…            | \-          |
| rowSums  | âœ…             | âœ…            | \-          |
| colMeans | âœ…             | âœ…            | \-          |
| rowMeans | âœ…             | âœ…            | \-          |
| colSds   | ðŸŸ§             | âœ…            | \-          |
| rowSds   | ðŸŸ§             | âœ…            | \-          |
| t        | show_fxn       | âœ…            | \-          |
| mean     | âœ…             | âœ…            | \-          |
| nrow     | âœ…             | âœ…            | âœ…          |
| ncol     | âœ…             | âœ…            | âœ…          |
| dims      | âœ…             | âœ…            | âœ…          |
| head     | show_fxn       | âœ…            | \-          |
| tail     | show_fxn       | âœ…            | \-          |
| math     | ðŸŸ§             | âœ…            | \-          |
| ...      |                |               |             |

## Loading library

```{r, message=F}
# git clone repo
devtools::load_all('/Users/user/Documents/dries/Giotto/duckling/')
library(dplyr)
library(duckdb)
```

## Working with large matrices with dbMatrix

`dbMatrix` consists of three subclasses that are designed to work with
different types of matrices. All `dbMatrix` subclasses currently support
basic generic operations as listed below, with more to be likely added
in the future.

### Sparse matrices

We represent sparse matrices using a triplicate format with `i`, `j`,
and `x` vectors. `i` and `j` refer to the row and column indices,
respectively, with specific `x` values or counts.

The `dbSparseMatrix` class stores this ijx matrix (now tehnically a
data.frame) with their associated dimension names and dimensions. It
does not contain zeros. Zero values are inferred based on the stored
dimensions.

```{r eval=TRUE, message=FALSE, warning=FALSE}
# simulate dbSparseMatrix
sparse = sim_dbSparseMatrix()

# preview 
dplyr::glimpse(sparse[]) 
```

```{r}
# Generics for dbSparseMatrix
colMeans(sparse)

colSums(sparse)

rowMeans(sparse)

rowSums(sparse)

mean(sparse)

dim(sparse)
```

### Dense matrices

We use the same approach as sparse matrices to convert a matrix into a
triplicate `i`, `j`, and `x` vector data.frame format. All values in the
`x` vector are retained and the `i` and `j` vectors represent the
dimnames.

```{r, eval=TRUE, message=FALSE, warning=FALSE}
dense = sim_dbDenseMatrix() # from MASS::Animals package

dplyr::glimpse(dense[]) 
```

```{r}
colMeans(dense)

colSums(dense)

rowMeans(dense)

rowSums(dense)

mean(dense)

dim(dense)

t(dense)

# Also supports math operations
dense + 10

dense / 10 

dense * 10

dense - 10
```

## Working with large data.frames with dbDataFrame

Large data.frames can be stored as dbDataFrames directly in DuckDB since
they are essentially the same tabular data structure.

```{r eval=TRUE, message=FALSE}
# Simulate dbDataFrame
df = sim_dbDataFrame()

# Generics for dbDataFrame
nrow(df)

ncol(df)

dim(df)
```

## Spatial querying

```{r eval=TRUE, message=FALSE}

```

## Session Info

```{r eval=TRUE, message=FALSE}
sessionInfo()
```
