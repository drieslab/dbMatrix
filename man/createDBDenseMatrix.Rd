% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dbMatrix.R
\name{createDBDenseMatrix}
\alias{createDBDenseMatrix}
\alias{createDBMatrix}
\title{Create a dense matrix with database backend}
\usage{
createDBMatrix(
  value,
  name = "dbMatrix",
  db_path = ":temp:",
  overwrite = FALSE,
  class = NULL,
  dims,
  dim_names,
  ...
)
}
\arguments{
\item{value}{object coercible to matrix or filepath to matrix data accessible
by one of the read functions, or a dplyr tbl in a db (required)}

\item{name}{table name to assign within database (optional)}

\item{db_path}{path to database on disk (relative or absolute) or in memory (":temp:")}

\item{overwrite}{whether to overwrite if table already exists in database (required)}

\item{class}{class of the matrix: "dbDenseMatrix" or "dbSparseMatrix" (required)}

\item{dims}{dimensions of the matrix (optional)}

\item{dim_names}{list of rownames and colnames of the matrix (optional)}

\item{...}{additional params to pass}
}
\description{
Create an S4 dbMatrix object that has a dense ijx triplet vector format (ijx).
The data for the matrix is either written to a specified database file or
could also be read in from files on disk.
}
\details{
Information is only read into the database during this process. Based
on the \code{name} and \code{db_path} a lazy connection is then made
downstream during \code{dbData} initialization and appended to the object.
If a dplyr tbl is provided as pre-made input then it is evaluated for whether
it exists within the specified backend then directly passed downstream.
}
\examples{
dbSparse <- createDBMatrix(value = sparse_matrix, db_path = ":temp:", name = "sparse_matrix", class = "dbSparseMatrix")
}
