% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/classes.R, R/dbMatrix.R
\name{dbMatrix}
\alias{dbMatrix}
\title{S4 dbMatrix class}
\usage{
dbMatrix(
  value,
  class = NULL,
  con = NULL,
  overwrite = FALSE,
  name = "dbMatrix",
  dims = NULL,
  dim_names = NULL,
  mtx_rowname_file_path,
  mtx_rowname_col_idx = 1,
  mtx_colname_file_path,
  mtx_colname_col_idx = 1,
  ...
)

dbMatrix(
  value,
  class = NULL,
  con = NULL,
  overwrite = FALSE,
  name = "dbMatrix",
  dims = NULL,
  dim_names = NULL,
  mtx_rowname_file_path,
  mtx_rowname_col_idx = 1,
  mtx_colname_file_path,
  mtx_colname_col_idx = 1,
  ...
)
}
\arguments{
\item{value}{data to be added to the database. See details for supported data types \code{(required)}}

\item{class}{class of the dbMatrix: \code{dbDenseMatrix} or \code{dbSparseMatrix} \code{(required)}}

\item{con}{DBI or duckdb connection object \code{(required)}}

\item{overwrite}{whether to overwrite if table already exists in database \code{(required)}}

\item{name}{table name to assign within database \code{(required, default: "dbMatrix")}}

\item{dims}{dimensions of the matrix \code{(optional: [int, int])}}

\item{dim_names}{dimension names of the matrix \code{(optional: list(enum, enum))}}

\item{mtx_rowname_file_path}{path to .mtx rowname file to be read into \code{(optional)}
database. by default, no header is assumed.}

\item{mtx_rowname_col_idx}{column index of row name file \code{(optional)}}

\item{mtx_colname_file_path}{path to .mtx colname file to be read into
database. by default, no header is assumed. \code{(optional)}}

\item{mtx_colname_col_idx}{column index of column name file \code{(optional)}}

\item{...}{additional params to pass}
}
\description{
Representation of sparse matrices using an on-disk database. Each object
is used as a connection to a single table that exists within the database.

Create an S4 \code{dbMatrix} object in sparse or dense triplet vector format.
}
\details{
This function reads in data into a pre-existing DuckDB database. Based
on the \code{name} and \code{db_path} a lazy connection is then made
downstream during \code{dbMatrix} initialization.

Supported \code{value} data types:
\itemize{
 \item \code{dgCMatrix} In-memory sparse matrix from the \code{Matrix} package
 \item \code{dgTMatrix} In-memory triplet vector or COO matrix
 \item \code{matrix} In-memory dense matrix from base R
 \item \code{.mtx} Path to .mtx file (TODO)
 \item \code{.csv} Path to .csv file (TODO)
 \item \code{tbl_duckdb_connection} Table in DuckDB database in ijx format from
 existing \code{dbMatrix} object. \code{dims} and \code{dim_names} must be
 specified if \code{value} is \code{tbl_duckdb_connection}.
}
}
\section{Slots}{

\describe{
\item{\code{dim_names}}{row [1] and col [2] names}

\item{\code{dims}}{dimensions of the matrix}
}}

\examples{
dgc <- dbMatrix:::sim_dgc()
dbSparse <- dbMatrix(value = dgc, db_path = ":memory:",
                           name = "sparse_matrix", class = "dbSparseMatrix",
                           overwrite = TRUE)
dbSparse
}
